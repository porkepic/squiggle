eval("//# sourceURL=vendor/ember-cli/loader.js");

;eval("define(\"dummy/app\", \n  [\"ember\",\"ember/resolver\",\"ember/load-initializers\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Resolver = __dependency2__[\"default\"];\n    var loadInitializers = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    Ember.MODEL_FACTORY_INJECTIONS = true;\n\n    var App = Ember.Application.extend({\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix,\n      Resolver: Resolver\n    });\n\n    loadInitializers(App, config.modulePrefix);\n\n    __exports__[\"default\"] = App;\n  });//# sourceURL=dummy/app.js");

;eval("define(\"dummy/brushes/animation_frame\", \n  [\"exports\"],\n  function(__exports__) {\n    \"use strict\";\n    // http://paulirish.com/2011/requestanimationframe-for-smart-animating/\n    // http://my.opera.com/emoller/blog/2011/12/20/requestanimationframe-for-smart-er-animating\n\n    // requestAnimationFrame polyfill by Erik MÃ¶ller. fixes from Paul Irish and Tino Zijdel\n\n    // MIT license\n\n    var lastTime = 0;\n    var vendors = [\'ms\', \'moz\', \'webkit\', \'o\'];\n    for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {\n        window.requestAnimationFrame = window[vendors[x]+\'RequestAnimationFrame\'];\n        window.cancelAnimationFrame = window[vendors[x]+\'CancelAnimationFrame\'] \n                                   || window[vendors[x]+\'CancelRequestAnimationFrame\'];\n    }\n\n    if (!window.requestAnimationFrame)\n        window.requestAnimationFrame = function(callback, element) {\n            var currTime = new Date().getTime();\n            var timeToCall = Math.max(0, 16 - (currTime - lastTime));\n            var id = window.setTimeout(function() { callback(currTime + timeToCall); }, \n              timeToCall);\n            lastTime = currTime + timeToCall;\n            return id;\n        };\n\n    if (!window.cancelAnimationFrame)\n        window.cancelAnimationFrame = function(id) {\n            clearTimeout(id);\n        };\n    __exports__[\"default\"] = window;\n  });//# sourceURL=dummy/brushes/animation_frame.js");

;eval("define(\"dummy/brushes/base\", \n  [\"ember\",\"dummy/brushes/animation_frame\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var frame = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Object.extend({\n      enable: Ember.K,\n      disable: Ember.K,\n      convertPoint: function(x, y){\n        var svg = this.get(\"el\").find(\"svg\")[0];\n        return this.createPoint(x,y).matrixTransform(svg.getScreenCTM().inverse()); \n      },\n\n      createPoint: function(x, y){\n        var svg = this.get(\"el\").find(\"svg\")[0],\n            pt = svg.createSVGPoint();\n        pt.x = x;\n        pt.y = y;\n        return pt;\n      },\n\n      currentViewBox: function(){\n        var svg = this.get(\"el\").find(\"svg\");\n        return svg[0].getAttribute(\"viewBox\").split(\" \").map(function(v){\n          return +v;\n        });\n      }\n    });\n  });//# sourceURL=dummy/brushes/base.js");

;eval("define(\"dummy/brushes/color\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Object.extend({\n      color: null,\n      style: function(){\n        var color = this.get(\"color\");\n        return [\"background-color:\", \";\"].join(color);\n      }.property(\"color\")\n    });\n  });//# sourceURL=dummy/brushes/color.js");

;eval("define(\"dummy/brushes/eraser\", \n  [\"ember\",\"dummy/brushes/select\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Select = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Select.extend({\n      select: function(e){\n\n        if(this._selection == e.target && e.target.tagName != \"image\"){\n          // check for i18n\n          var message = \"Do you want to delete this note?\";\n          if(Ember.I18n){\n            message = Ember.I18n.t(\"squiggle.erase_confirm\");\n          }\n          if(confirm(message)){\n            Ember.$(e.target).remove();\n            this.get(\"el\").find(\".highlight,.highlight-select,.text-highlight,.text-highlight-select\").remove();\n          }\n\n          this._selection = null;\n        }else{\n          this._super(e);  \n        }\n      }\n    });\n  });//# sourceURL=dummy/brushes/eraser.js");

;eval("define(\"dummy/brushes/select\", \n  [\"ember\",\"dummy/brushes/base\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Base.extend({\n      el: null,\n\n      events: function(){\n        var events = new Hammer(this.get(\"el\").find(\"svg\")[0]);\n        return events;\n      }.property(\"el\"),\n\n      enable: function(){\n        var el = this.get(\"el\"),\n            selection = el.find(\"text:not(.highlight), path:not(.highlight)\");\n        if(!( \"ontouchstart\" in window)){\n          selection.on(\"mouseenter\", Ember.$.proxy(this.highlight, this));\n          selection.on(\"mouseleave\", Ember.$.proxy(this.clearHighlights, this));\n        }\n        this.get(\"events\").on(\"tap\", Ember.$.proxy(this.select, this));\n      },\n\n      disable: function(){\n        var el = this.get(\"el\"),\n            selection = el.find(\"text:not(.highlight), path:not(.highlight)\");\n\n        selection.off(\"mouseenter\");\n        selection.off(\"mouseleave\");\n        this.get(\"events\").off(\"tap\");\n      },\n\n      highlight: function(e){\n        var target = Ember.$(e.target),\n            el = this.get(\"el\"),\n            highlight;\n\n        this.clearHighlights();\n\n        highlight = target.clone()\n        highlight.attr(\"class\", \"highlight\");\n        highlight.insertBefore(target);\n      },\n\n      clearHighlights: function(e){\n        // clear all other highlight\n        var el = this.get(\"el\");\n        el.find(\".highlight\").remove();\n      },\n\n      select: function(e){\n        var target = Ember.$(e.target),\n            el = this.get(\"el\"),\n            highlight;\n\n        this.clearHighlights();\n\n        el.find(\".highlight-select\").remove();\n\n        this._selection = e.target;\n\n        highlight = target.clone()\n        highlight.attr(\"class\", \"highlight-select\");\n        highlight.insertBefore(target);\n      }\n    });\n  });//# sourceURL=dummy/brushes/select.js");

;eval("define(\"dummy/brushes/line\", \n  [\"ember\",\"dummy/brushes/path\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Path = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Path.extend({\n\n    });\n  });//# sourceURL=dummy/brushes/line.js");

;eval("define(\"dummy/brushes/path\", \n  [\"ember\",\"dummy/brushes/base\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Base.extend({\n      paper: null,\n      shapes: null,\n      el: null,\n\n      _savedPath: null,\n      _shape: null,\n\n      events: function(){\n        var events = new Hammer(this.get(\"el\").find(\"svg\")[0]);\n        return events;\n      }.property(\"el\"),\n\n      enable: function(){\n        var events = this.get(\"events\");\n\n        this._shape = this._savedPath = null;\n\n        events.get(\'pan\').set({ direction: Hammer.DIRECTION_ALL });\n        events.on(\"panstart\", Ember.$.proxy(this.start, this));\n        events.on(\"panmove\", Ember.$.proxy(this.move, this));\n        events.on(\"panend\", Ember.$.proxy(this.end, this));\n      },\n\n      disable: function(){\n        var events = this.get(\"events\");\n        events.off(\"panstart\");\n        events.off(\"panmove\");\n        events.off(\"panend\");\n      },\n\n      _animationFrame: function(){\n        var path = this._savedPath,\n            added_path = [],\n            pathPoint = this._pathPoint;\n        this._pathPoint = null;\n        if(pathPoint){\n          pathPoint = this.convertPoint( pathPoint.x, pathPoint.y);\n          added_path.push(\"L\");\n          added_path.push(pathPoint.x);\n          added_path.push(pathPoint.y);\n          path.push(added_path);\n          this._shape.attr(\'path\', path);\n        }\n        if(this._animate){\n          window.requestAnimationFrame(Ember.$.proxy(this._animationFrame, this));\n        }\n      },\n\n      start: function(e){\n        var center = e.center,\n            startx = center.x,\n            starty = center.y,\n            paper = this.get(\"paper\"),\n            shapes = this.get(\"shapes\"),\n            events = this.get(\"events\"),\n            point;\n\n        point = this.convertPoint(startx, starty);\n\n        this._shape = paper.path(\"M\"+ point.x + \" \" + point.y);\n        this._savedPath = this._shape.attr(\'path\');\n\n        shapes.push(this._shape);\n        this._shape.attr(\'stroke-width\',  this.get(\"brushWidth\"));\n        this._shape.attr(\'stroke\', this.get(\"brushColor\"));\n\n        this._animate = true;\n        window.requestAnimationFrame(Ember.$.proxy(this._animationFrame, this));\n      },\n\n      move: function(e){\n        this._pathPoint = e.center;\n      },\n\n      end: function(e){\n        this._animate = false;\n        this._shape = this._savedPath = null;\n      }\n    });\n  });//# sourceURL=dummy/brushes/path.js");

;eval("define(\"dummy/brushes/nav\", \n  [\"ember\",\"dummy/brushes/base\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Base.extend({\n      el: null,\n      paper: null,\n      \n      events: function(){\n        var events = new Hammer(this.get(\"el\").find(\"svg\")[0]);\n        events.get(\'pan\').set({ direction: Hammer.DIRECTION_ALL });\n        return events;\n      }.property(\"el\"),\n\n      enable: function(){\n        // check if there is touch events\n        this.get(\"events\").on(\"panstart\", Ember.$.proxy(this.moveStart, this));\n        this.get(\"events\").on(\"panmove\", Ember.$.proxy(this.move, this));\n        this.get(\"events\").on(\"panend\", Ember.$.proxy(this.moveEnd, this));\n      },\n\n      disable: function(){\n        this.get(\"events\").off(\"panstart\");\n        this.get(\"events\").off(\"panmove\");\n        this.get(\"events\").off(\"panend\");\n      },\n\n      _animateFrame: function(){\n        var e = this._lastEvent;\n\n        if(e){\n          var box = this._startViewBox,\n              paper = this.get(\"paper\"),\n              el = this.get(\"el\"),\n              width = el.width(),\n              height = el.height(),\n              x, y;\n\n          this._lastEvent = null;\n\n          x = -e.deltaX + this._startViewBox[0];\n          y = -e.deltaY + this._startViewBox[1];\n            \n          x = (x < 0 ? 0 : x);\n          y = (y < 0 ? 0 : y);\n\n          // do not overflow width\n          if(box[2] + Math.abs(x) > width){\n            x = width - box[2];\n          }\n\n          // do not overflow height\n          if(box[3] + Math.abs(y) > height){\n            y = height - box[3];\n          }\n\n          paper.setViewBox(x, y, box[2], box[3]);\n        }\n        if(this._animate){\n          window.requestAnimationFrame(Ember.$.proxy(this._animateFrame, this));\n        }\n      },\n\n      moveStart: function(e){\n        this._startViewBox = this.currentViewBox();\n        this._animate = true;\n        this.move(e);\n        window.requestAnimationFrame(Ember.$.proxy(this._animateFrame, this));\n      },\n\n      moveEnd: function(){\n        this._animate = false;\n      },\n\n      move: function(e){\n        this._lastEvent = e;\n      }\n    });\n  });//# sourceURL=dummy/brushes/nav.js");

;eval("define(\"dummy/brushes/text\", \n  [\"ember\",\"dummy/brushes/base\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Base.extend({\n      el: null,\n      paper: null,\n      \n      events: function(){\n        var events = new Hammer(this.get(\"el\").find(\"svg\")[0]);\n        return events;\n      }.property(\"el\"),\n\n      enable: function(){\n        var events = this.get(\"events\");\n\n        events.get(\'pan\').set({ direction: Hammer.DIRECTION_ALL });\n        events.on(\"panstart\", Ember.$.proxy(this.start, this));\n        events.on(\"panmove\", Ember.$.proxy(this.move, this));\n        events.on(\"panend\", Ember.$.proxy(this.end, this));\n        events.on(\"tap\", Ember.$.proxy(this.startTap, this));\n      },\n\n      disable: function(){\n        var events = this.get(\"events\");\n        events.off(\"panstart\");\n        events.off(\"panmove\");\n        events.off(\"panend\");\n        events.off(\"tap\");\n      },\n\n      startTap: function(e){\n        this.start(e);\n        this._area.css( this.checkEdges({\n          top: +this._area.css(\"top\").replace(\"px\", \"\"),\n          left: +this._area.css(\"left\").replace(\"px\", \"\"),\n          width: 200,\n          height: 50\n        }));\n        this.end();\n      },\n\n      start: function(e){\n        // first place the textarea at the starting point.\n        var el = this.get(\"el\"),\n            center = e.center,\n            startx = center.x,\n            starty = center.y,\n            offset = this.get(\"el\").offset();\n\n        this._area = el.find(\"textarea\");\n        this._area.css({\n          top: center.y - offset.top + $(window).scrollTop(),\n          left: center.x - offset.left + $(window).scrollLeft()\n        });\n        this._area.addClass(\"active\");\n        this._initialCenter = center;\n      },\n\n      move: function(e){\n        // when moving resize the area\n        var center = e.center,\n            offset = this.get(\"el\").offset(),\n            box;\n\n        // check edge case when not growing the area\n        if(center.x < this._initialCenter.x || center.y < this._initialCenter.y){\n          var c = this._initialCenter;\n          this._initialCenter = center;\n          center = c;\n        }\n\n        // set the top/left, width/height\n\n        box = {\n          top: this._initialCenter.y - offset.top + $(window).scrollTop(),\n          left: this._initialCenter.x - offset.left + $(window).scrollLeft(),\n          width: Math.max(200, center.x - this._initialCenter.x),\n          height: Math.max(50, center.y - this._initialCenter.y)\n        };\n\n        this._area.css( this.checkEdges(box) );\n      },\n\n      end: function(e){\n        this._area.focus();\n        this._area.one(\"blur\", Ember.$.proxy(this.convertToSVG, this));\n      },\n\n      checkEdges: function(box){\n        var el = this.get(\"el\"),\n            width = el.width(),\n            height = el.height();\n\n        // account for 10 px for the padding and border;\n        if(box.left + box.width > width){\n          box.width = width - box.left - 10;\n        }\n        if(box.top + box.height > height){\n          box.height = height - box.top - 10;\n        }\n        return box;\n      },\n\n      resizeTextNode: function(text, width) {\n        var characters = text.textContent.split(\"\").reverse(),\n            character,\n            line = [],\n            lineNumber = 0,\n            lineHeight = 1.1, // ems\n            y = text.getAttribute(\"y\"),\n            x = text.getAttribute(\"x\"),\n            dy = 0,\n            tspan = document.createElementNS(\'http://www.w3.org/2000/svg\', \'tspan\');\n\n            // prepare the first tspan\n            tspan.setAttribute(\"x\", x);\n            tspan.setAttribute(\"y\", y);\n            tspan.setAttribute(\"dy\", dy + \"em\");\n            \n            // remove current text\n            text.textContent = null;\n            text.appendChild(tspan);\n\n        \n            \n        while (character = characters.pop()) {\n          line.push(character);\n          tspan.textContent = line.join(\"\");\n          if (tspan.getComputedTextLength() > width) {\n            line.pop();\n            tspan.textContent = line.join(\"\");\n            line = [character];\n\n            tspan = document.createElementNS(\'http://www.w3.org/2000/svg\', \'tspan\');\n            tspan.setAttribute(\"x\", x);\n            tspan.setAttribute(\"y\", y);\n            tspan.setAttribute(\"dy\", (++lineNumber * lineHeight + dy) + \"em\");\n            tspan.textContent = character;\n            text.appendChild(tspan);\n          }\n        }\n      },\n\n      convertToSVG: function(){\n        var value = this._area.val(),\n            svg = this.get(\"el\").find(\"svg\")[0],\n            text;\n        if(value && value.length > 0){\n          // configure the elements to fit in the bounded box\n          var point = this._area.offset(),\n              w = Ember.$(window);\n          point = this.convertPoint(point.left - w.scrollLeft(), point.top - w.scrollTop() + 20);\n\n          text = document.createElementNS(\'http://www.w3.org/2000/svg\', \'text\');\n\n          text.setAttribute(\"y\", point.y);\n          text.setAttribute(\"x\", point.x);\n          text.textContent = value;\n          text.setAttribute(\"fill\", this.get(\"brushColor\"));\n          text.setAttribute(\"stroke\", this.get(\"brushColor\"));\n          text.setAttribute(\"stroke-width\", \"0px\");\n          text.setAttribute(\"font-family\", \"sans-serif\");\n          text.setAttribute(\"font-size\", this.get(\"fontSize\") + \"px\");\n          svg.appendChild(text);\n\n          // find out width\n          point = this.convertPoint(this.get(\"el\").offset().left + this._area.width(), 0);\n          this.resizeTextNode(text, point.x);\n        }\n\n        // remove the value for next use.\n        this._area.val(\"\");\n        this._area.removeClass(\"active\");\n        this._area.css({\n          width: 0,\n          height: 0\n        });\n      }\n    });\n  });//# sourceURL=dummy/brushes/text.js");

;eval("define(\"dummy/brushes/zoom\", \n  [\"ember\",\"dummy/brushes/base\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Base = __dependency2__[\"default\"];\n\n    __exports__[\"default\"] = Base.extend({\n      el: null,\n      paper: null,\n      \n      events: function(){\n        var events = new Hammer(this.get(\"el\").find(\"svg\")[0]);\n        events.get(\'pinch\').set({ enable: true });\n        return events;\n      }.property(\"el\"),\n\n      enable: function(){\n        var svg = this.get(\"el\").find(\"svg\");\n\n        // check if there is touch events\n        if(\"ontouchstart\" in window){\n          this.get(\"events\").on(\"pinchstart\", Ember.$.proxy(this.pinchStart, this));\n          this.get(\"events\").on(\"pinchmove\", Ember.$.proxy(this.pinchZoom, this));\n        }else{\n          svg.on(\"mousewheel\", Ember.$.proxy(this.scrollZoom, this));\n        }\n\n        this._zoom = 1;\n        this._originalViewbox = this.currentViewBox();\n      },\n\n      disable: function(){\n        this.get(\"events\").off(\"pinchstart\");\n        this.get(\"events\").off(\"pinchmove\");\n        this.get(\"el\").find(\"svg\").off(\"mousewheel\");\n      },\n\n      _lastZoom: null,\n      _animationFrame: function(){\n        var zoom = this._lastZoom;\n        this._lastZoom = null;\n        if(zoom) this.zoom.apply(this, zoom);\n      },\n\n      scrollZoom: function(e){\n        var delta = e.originalEvent.deltaY,\n            pt = this.convertPoint(e.clientX, e.clientY),\n            factor = delta < 0 ? 0.95 : 1.05;\n\n        this._lastZoom = [pt, factor];\n        window.requestAnimationFrame(Ember.$.proxy(this._animationFrame, this));\n        e.preventDefault();\n      },\n\n      pinchStart: function(e){\n        this._pinchStartBox = this.currentViewBox();\n        this._pinchZoom = this._zoom;\n        this.pinchMove(e);\n      },\n\n      pinchZoom: function(e){\n        // put the scale back into acceptable range.\n        var pt = this.convertPoint(e.center.x, e.center.y);\n\n        this._lastZoom = [pt, null, e.scale * this._pinchZoom, this._pinchStartBox];\n        window.requestAnimationFrame(Ember.$.proxy(this._animationFrame, this));\n      },\n\n      zoom: function(location, factor, zoom, box) {\n        if(!box){\n          box = this.currentViewBox();\n        }\n        //transform real coordinates into viewbox coordinates\n        var x =  box[0] + (location.x / this._zoom),\n            y =  box[1] + (location.y / this._zoom),\n            paper = this.get(\"paper\");\n\n          if(!zoom){\n            zoom = (this._zoom * factor);  \n          }\n          \n          if(zoom < 1){\n            zoom = 1;\n          }\n          this._zoom = zoom;\n\n          //zoom viewbox dimensions\n          box[2] = this._originalViewbox[2] / zoom;\n          box[3] = this._originalViewbox[3] / zoom;\n          \n          //transform coordinates to new box coordinates\n          box[0] = x - location.x / zoom;\n          box[1] = y - location.y / zoom;\n\n          box[0] = (box[0] < 0 ? 0 : box[0]);\n          box[1] = (box[1] < 0 ? 0 : box[1]);\n\n          // do not overflow width\n          if(box[2] + Math.abs(box[0]) > this._originalViewbox[2]){\n            box[0] = this._originalViewbox[2] - box[2];\n          }\n\n          // do not overflow height\n          if(box[3] + Math.abs(box[1]) > this._originalViewbox[3]){\n            box[1] = this._originalViewbox[3] - box[3];\n          }\n          \n          paper.setViewBox.apply(paper, box, true);\n      }\n    });\n  });//# sourceURL=dummy/brushes/zoom.js");

;eval("define(\"dummy/components/squiggle-canvas\", \n  [\"ember\",\"dummy/brushes/base\",\"dummy/brushes/path\",\"dummy/brushes/text\",\"dummy/brushes/eraser\",\"dummy/brushes/zoom\",\"dummy/brushes/nav\",\"dummy/brushes/color\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __dependency5__, __dependency6__, __dependency7__, __dependency8__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var BaseBrush = __dependency2__[\"default\"];\n    var PathBrush = __dependency3__[\"default\"];\n    var TextBrush = __dependency4__[\"default\"];\n    var EraseBrush = __dependency5__[\"default\"];\n    var ZoomBrush = __dependency6__[\"default\"];\n    var NavBrush = __dependency7__[\"default\"];\n    var Color = __dependency8__[\"default\"];\n\n    __exports__[\"default\"] = Ember.Component.extend({\n      layoutName: \"components/squiggle-canvas\",\n      classNameBindings: [\":squiggle-canvas\", \"toolClass\"],\n      attributeBindings: [\"style\"],\n\n      // either provide width + height or an image\n      width: \"100%\",\n      height: \"auto\",\n      image: null,\n\n      smallSize: false,\n      showColors: true,\n      showSizes: true,\n      showTools: true,\n\n      toolClass: function(){\n        return \"squiggle-canvas-\" + this.get(\"toolName\");\n      }.property(\"toolName\"),\n\n      style: function(){\n        return [\"width:\" + this.get(\"width\"),\n         \"height:\" + this.get(\"height\")].join(\";\")\n      }.property(\"width\", \"height\"),\n\n      colors: [\n        Color.create({color:\"#FF4136\"}),\n        Color.create({color:\"#FFDC00\"}),\n        Color.create({color:\"#0074D9\"}),\n        Color.create({color:\"#2ECC40\"}),\n        Color.create({color:\"#000\", selected:true})\n      ],\n\n      zoom: function(){\n        return ZoomBrush.create({\n          paper: this._raphael,\n          el: this.$(\".squiggle-paper\")\n        });\n      }.property(),\n\n      eraserTool: function(){\n        return EraseBrush.create({\n          el: this.$(\".squiggle-paper\")\n        })\n      }.property(),\n\n      pathTool: function(){\n        return PathBrush.create({\n          paper: this._raphael,\n          shapes: this._shapes,\n          el: this.$(\".squiggle-paper\")\n        })\n      }.property(),\n\n      textTool: function(){\n        return TextBrush.create({\n          paper: this._raphael,\n          el: this.$(\".squiggle-paper\")\n        })\n      }.property(),\n\n      selectTool: function(){\n        return SelectBrush.create({\n          el: this.$(\".squiggle-paper\")\n        })\n      }.property(),\n\n      navTool: function(){\n        return NavBrush.create({\n          paper: this._raphael,\n          el: this.$(\".squiggle-paper\")\n        });\n      }.property(),\n\n      toolName: \"path\",\n      tool: function(){\n        var tool = this.get(\"toolName\");\n        return this.get(tool + \"Tool\");\n      }.property(\"toolName\"),\n\n      isEraserTool: Ember.computed.equal(\"toolName\", \"eraser\"),\n      isPathTool: Ember.computed.equal(\"toolName\", \"path\"),\n      isTextTool: Ember.computed.equal(\"toolName\", \"text\"),\n      isSelectTool: Ember.computed.equal(\"toolName\", \"select\"),\n      isNavTool: Ember.computed.equal(\"toolName\", \"nav\"),\n\n      color: function(){\n        return this.get(\"colors\").findProperty(\"selected\", true);\n      }.property(\"colors.@each.selected\"),\n\n      textStyle: function(){\n        return [\"color:\", this.get(\"color.color\"),\n        \";font-size:\", this.get(\"smallSize\") ? \"14px\": \"24px\", \";\"].join(\"\");\n      }.property(\"color\", \"smallSize\"),\n\n      didInsertElement: function(){\n        if(this.get(\"image\")){\n          this.$(\"img\").on(\"load\", Ember.$.proxy(this.createRaphael, this));\n        } else {\n          this.createRaphael();\n        }\n      },\n\n      createRaphael: function(){\n        var that = this,\n            width = this.$().width(),\n            height = this.$().height();\n        this._raphael = Raphael(this.$(\".squiggle-paper\")[0], width, height);\n        this._shapes = [];\n\n        this.get(\"tool\").enable();\n        this.configureTool();\n\n        this._raphael.setViewBox(0,0, width, height);\n\n        this._raphael.image(this.get(\"image\"), 0,0, width, height);\n        \n        Ember.$(window).on(\"resize\", function(){\n          Ember.run.debounce(that, \"changeSize\", 100);\n        });\n\n        this.get(\"zoom\").enable();\n      },\n\n      configureTool: function(){\n        var tool = this.get(\"tool\");\n        tool.set(\"brushColor\", this.get(\"color.color\"));\n        tool.set(\"brushWidth\", this.get(\"smallSize\") ? 4 : 8);\n        tool.set(\"fontSize\", this.get(\"smallSize\") ? 14 : 24);\n      }.observes(\"tool\", \"color\", \"smallSize\"),\n\n      changeSize: function(){\n        this._raphael.setSize(this.$().width(),this.$().height());\n      },\n\n      // To upload follow http://stackoverflow.com/questions/4998908/convert-data-uri-to-file-then-append-to-formdata\n      exportToPng: function(){\n        var img = this.get(\"image\"),\n            canvas = this.$(\"canvas\")[0],\n            context = canvas.getContext(\"2d\"),\n            svg = this.$(\"svg\").clone(),\n            svgImg = new Image(), url;\n\n        if(img){\n          img = this.$(\"img\")[0];\n          canvas.width = img.naturalWidth;\n          canvas.height = img.naturalHeight;\n\n          svg.attr(\"width\", canvas.width);\n          svg.attr(\"height\", canvas.height);\n\n          context.drawImage(img, 0, 0);\n\n        }else{\n          canvas.width = this.$().width();\n          canvas.height = this.$().height();\n        }\n        url = \"data:image/svg+xml,\" + svg[0].outerHTML;\n\n        svgImg.onload = function () {\n          context.drawImage(svgImg, 0, 0);\n          window.location = canvas.toDataURL();\n        }\n        svgImg.src = url;\n      },\n\n      actions: {\n        selectTool: function(tool){\n          this.get(\"tool\").disable();\n          this.set(\"toolName\", tool);\n          this.get(\"tool\").enable();\n        },\n        selectColor: function(color){\n          this.set(\"color.selected\", false);\n          color.set(\"selected\", true);\n        },\n        setSmallSize: function(){\n          this.set(\"smallSize\", true);\n        },\n        setLargeSize: function(){\n          this.set(\"smallSize\", false);\n          this.exportToPng();\n        }\n      }\n    });\n  });//# sourceURL=dummy/components/squiggle-canvas.js");

;eval("define(\"dummy/initializers/export-application-global\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    function initialize(container, application) {\n      var classifiedName = Ember.String.classify(config.modulePrefix);\n\n      if (config.exportApplicationGlobal) {\n        window[classifiedName] = application;\n      }\n    };\n    __exports__.initialize = initialize;\n    __exports__[\"default\"] = {\n      name: \'export-application-global\',\n\n      initialize: initialize\n    };\n  });//# sourceURL=dummy/initializers/export-application-global.js");

;eval("define(\"dummy/router\", \n  [\"ember\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var Router = Ember.Router.extend({\n      location: config.locationType\n    });\n\n    Router.map(function() {\n    });\n\n    __exports__[\"default\"] = Router;\n  });//# sourceURL=dummy/router.js");

;eval("define(\"dummy/templates/application\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data\n    /**/) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', helper, options, helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;\n\n\n      data.buffer.push(\"<h2 id=\'title\'>Welcome to Ember.js</h2>\\n\\n\");\n      data.buffer.push(escapeExpression((helper = helpers[\'squiggle-canvas\'] || (depth0 && depth0[\'squiggle-canvas\']),options={hash:{\n        \'image\': (\"public/graph.png\")\n      },hashTypes:{\'image\': \"STRING\"},hashContexts:{\'image\': depth0},contexts:[],types:[],data:data},helper ? helper.call(depth0, options) : helperMissing.call(depth0, \"squiggle-canvas\", options))));\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/application.js");

;eval("define(\"dummy/templates/components/squiggle-canvas\", \n  [\"ember\",\"exports\"],\n  function(__dependency1__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    __exports__[\"default\"] = Ember.Handlebars.template(function anonymous(Handlebars,depth0,helpers,partials,data\n    /**/) {\n    this.compilerInfo = [4,\'>= 1.0.0\'];\n    helpers = this.merge(helpers, Ember.Handlebars.helpers); data = data || {};\n      var buffer = \'\', stack1, escapeExpression=this.escapeExpression, self=this;\n\n    function program1(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n  <div class=\\\"squiggle-tools\\\">\\n    \");\n      stack1 = helpers[\'if\'].call(depth0, \"showColors\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(2, program2, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    \");\n      stack1 = helpers[\'if\'].call(depth0, \"showSizes\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(5, program5, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n    \");\n      stack1 = helpers[\'if\'].call(depth0, \"showTools\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(7, program7, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n  </div>\\n\");\n      return buffer;\n      }\n    function program2(depth0,data) {\n      \n      var buffer = \'\', stack1;\n      data.buffer.push(\"\\n      <div class=\\\"squiggle-colors\\\">\\n        \");\n      stack1 = helpers.each.call(depth0, \"color\", \"in\", \"colors\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(3, program3, data),contexts:[depth0,depth0,depth0],types:[\"ID\",\"ID\",\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      data.buffer.push(\"\\n      </div>\\n    \");\n      return buffer;\n      }\n    function program3(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n          <div \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\":squiggle-color color.selected:active\"),\n        \'style\': (\"color.style\")\n      },hashTypes:{\'class\': \"STRING\",\'style\': \"STRING\"},hashContexts:{\'class\': depth0,\'style\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"selectColor\", \"color\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"ID\"],data:data})));\n      data.buffer.push(\">\\n          </div>\\n        \");\n      return buffer;\n      }\n\n    function program5(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n      <div \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\"isTextTool:squiggle-text-size :squiggle-sizes\"),\n        \'style\': (\"textStyle\")\n      },hashTypes:{\'class\': \"STRING\",\'style\': \"STRING\"},hashContexts:{\'class\': depth0,\'style\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\">\\n        <div \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\":squiggle-size :small smallSize:active\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"setSmallSize\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">\\n          <div class=\\\"bar\\\" \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'style\': (\"color.style\")\n      },hashTypes:{\'style\': \"STRING\"},hashContexts:{\'style\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"></div>\\n        </div>\\n        <div \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\":squiggle-size smallSize::active\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"setLargeSize\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0],types:[\"STRING\"],data:data})));\n      data.buffer.push(\">\\n          <div class=\\\"bar\\\" \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'style\': (\"color.style\")\n      },hashTypes:{\'style\': \"STRING\"},hashContexts:{\'style\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"></div>\\n        </div>\\n      </div>\\n    \");\n      return buffer;\n      }\n\n    function program7(depth0,data) {\n      \n      var buffer = \'\';\n      data.buffer.push(\"\\n      <div class=\\\"squiggle-brushes\\\">\\n        <div \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\":squiggle-brush :squiggle-eraser isEraserTool:active\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"selectTool\", \"eraser\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"STRING\"],data:data})));\n      data.buffer.push(\"></div>\\n        <div \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\":squiggle-brush :squiggle-path isPathTool:active\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"selectTool\", \"path\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"STRING\"],data:data})));\n      data.buffer.push(\"></div>\\n        <div \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\":squiggle-brush :squiggle-text isTextTool:active\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"selectTool\", \"text\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"STRING\"],data:data})));\n      data.buffer.push(\"></div>\\n        <div \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'class\': (\":squiggle-brush :squiggle-nav isNavTool:active\")\n      },hashTypes:{\'class\': \"STRING\"},hashContexts:{\'class\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\" \");\n      data.buffer.push(escapeExpression(helpers.action.call(depth0, \"selectTool\", \"nav\", {hash:{},hashTypes:{},hashContexts:{},contexts:[depth0,depth0],types:[\"STRING\",\"STRING\"],data:data})));\n      data.buffer.push(\"></div>\\n      </div>\\n    \");\n      return buffer;\n      }\n\n      data.buffer.push(\"<img \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'src\': (\"image\")\n      },hashTypes:{\'src\': \"STRING\"},hashContexts:{\'src\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"/>\\n<canvas></canvas>\\n<div class=\\\"squiggle-paper\\\">\\n\\n  <textarea \");\n      data.buffer.push(escapeExpression(helpers[\'bind-attr\'].call(depth0, {hash:{\n        \'style\': (\"textStyle\")\n      },hashTypes:{\'style\': \"STRING\"},hashContexts:{\'style\': depth0},contexts:[],types:[],data:data})));\n      data.buffer.push(\"></textarea>\\n</div>\\n\\n\");\n      stack1 = helpers[\'if\'].call(depth0, \"showTools\", {hash:{},hashTypes:{},hashContexts:{},inverse:self.noop,fn:self.program(1, program1, data),contexts:[depth0],types:[\"ID\"],data:data});\n      if(stack1 || stack1 === 0) { data.buffer.push(stack1); }\n      return buffer;\n      \n    });\n  });//# sourceURL=dummy/templates/components/squiggle-canvas.js");

;eval("define(\"dummy/tests/app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'app.js should pass jshint\', function() { \n      ok(true, \'app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/app.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/resolver.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/resolver.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/resolver.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/resolver.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/helpers/start-app.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests/helpers\');\n    test(\'dummy/tests/helpers/start-app.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/helpers/start-app.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/helpers/start-app.jshint.js");

;eval("define(\"dummy/tests/dummy/tests/test-helper.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - dummy/tests\');\n    test(\'dummy/tests/test-helper.js should pass jshint\', function() { \n      ok(true, \'dummy/tests/test-helper.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/dummy/tests/test-helper.jshint.js");

;eval("define(\"dummy/tests/helpers/resolver\", \n  [\"ember/resolver\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __exports__) {\n    \"use strict\";\n    var Resolver = __dependency1__[\"default\"];\n    var config = __dependency2__[\"default\"];\n\n    var resolver = Resolver.create();\n\n    resolver.namespace = {\n      modulePrefix: config.modulePrefix,\n      podModulePrefix: config.podModulePrefix\n    };\n\n    __exports__[\"default\"] = resolver;\n  });//# sourceURL=dummy/tests/helpers/resolver.js");

;eval("define(\"dummy/tests/helpers/start-app\", \n  [\"ember\",\"dummy/app\",\"dummy/router\",\"dummy/config/environment\",\"exports\"],\n  function(__dependency1__, __dependency2__, __dependency3__, __dependency4__, __exports__) {\n    \"use strict\";\n    var Ember = __dependency1__[\"default\"];\n    var Application = __dependency2__[\"default\"];\n    var Router = __dependency3__[\"default\"];\n    var config = __dependency4__[\"default\"];\n\n    __exports__[\"default\"] = function startApp(attrs) {\n      var App;\n\n      var attributes = Ember.merge({}, config.APP);\n      attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n      Router.reopen({\n        location: \'none\'\n      });\n\n      Ember.run(function() {\n        App = Application.create(attributes);\n        App.setupForTesting();\n        App.injectTestHelpers();\n      });\n\n      App.reset(); // this shouldn\'t be needed, i want to be able to \"start an app at a specific URL\"\n\n      return App;\n    }\n  });//# sourceURL=dummy/tests/helpers/start-app.js");

;eval("define(\"dummy/tests/router.jshint\", \n  [],\n  function() {\n    \"use strict\";\n    module(\'JSHint - .\');\n    test(\'router.js should pass jshint\', function() { \n      ok(true, \'router.js should pass jshint.\'); \n    });\n  });//# sourceURL=dummy/tests/router.jshint.js");

;eval("define(\"dummy/tests/test-helper\", \n  [\"dummy/tests/helpers/resolver\",\"ember-qunit\"],\n  function(__dependency1__, __dependency2__) {\n    \"use strict\";\n    var resolver = __dependency1__[\"default\"];\n    var setResolver = __dependency2__.setResolver;\n\n    setResolver(resolver);\n\n    document.write(\'<div id=\"ember-testing-container\"><div id=\"ember-testing\"></div></div>\');\n\n    QUnit.config.urlConfig.push({ id: \'nocontainer\', label: \'Hide container\'});\n    var containerVisibility = QUnit.urlParams.nocontainer ? \'hidden\' : \'visible\';\n    document.getElementById(\'ember-testing-container\').style.visibility = containerVisibility;\n  });//# sourceURL=dummy/tests/test-helper.js");

/* jshint ignore:start */

define('dummy/config/environment', ['ember'], function(Ember) {
  var prefix = 'dummy';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = Ember['default'].$('meta[name="' + metaName + '"]').attr('content');
  var config = JSON.parse(unescape(rawConfig));

  return { 'default': config };
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */


});

if (runningTests) {
  require('dummy/tests/test-helper');
} else {
  require('dummy/app')['default'].create({"LOG_ACTIVE_GENERATION":true,"LOG_VIEW_LOOKUPS":true});
}

/* jshint ignore:end */
